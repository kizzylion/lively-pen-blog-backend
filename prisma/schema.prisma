generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String?
  googleId   String?  @unique
  name       String?
  avatarUrl  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  role       Role     @relation(fields: [roleId], references: [id])
  roleId     String   @default("user")

  blogs      Blog[]
  likes      Like[]
  comments   Comment[]
}

model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  users           User[]
  rolePermissions RolePermission[]
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]
}


model RolePermission {
  roleName        String
  permissionName  String

  role       Role       @relation(fields: [roleId], references: [id])
  roleId     String
  permission Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@id([roleId, permissionId])
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author    User     @relation(fields: [authorId], references: [id])
  authorId  String

  likes     Like[]
  comments  Comment[]
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  userId    String

  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String

  @@unique([userId, blogId])
}

model Comment {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  userId    String

  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
}
